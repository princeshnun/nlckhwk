/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReportData } from "./ReportData";
import { ReportDataCountArgs } from "./ReportDataCountArgs";
import { ReportDataFindManyArgs } from "./ReportDataFindManyArgs";
import { ReportDataFindUniqueArgs } from "./ReportDataFindUniqueArgs";
import { DeleteReportDataArgs } from "./DeleteReportDataArgs";
import { ReportDataService } from "../reportData.service";
@graphql.Resolver(() => ReportData)
export class ReportDataResolverBase {
  constructor(protected readonly service: ReportDataService) {}

  async _reportDataItemsMeta(
    @graphql.Args() args: ReportDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReportData])
  async reportDataItems(
    @graphql.Args() args: ReportDataFindManyArgs
  ): Promise<ReportData[]> {
    return this.service.reportDataItems(args);
  }

  @graphql.Query(() => ReportData, { nullable: true })
  async reportData(
    @graphql.Args() args: ReportDataFindUniqueArgs
  ): Promise<ReportData | null> {
    const result = await this.service.reportData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReportData)
  async deleteReportData(
    @graphql.Args() args: DeleteReportDataArgs
  ): Promise<ReportData | null> {
    try {
      return await this.service.deleteReportData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
