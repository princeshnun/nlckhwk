/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReportDataService } from "../reportData.service";
import { ReportDataCreateInput } from "./ReportDataCreateInput";
import { ReportData } from "./ReportData";
import { ReportDataFindManyArgs } from "./ReportDataFindManyArgs";
import { ReportDataWhereUniqueInput } from "./ReportDataWhereUniqueInput";
import { ReportDataUpdateInput } from "./ReportDataUpdateInput";

export class ReportDataControllerBase {
  constructor(protected readonly service: ReportDataService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReportData })
  async createReportData(
    @common.Body() data: ReportDataCreateInput
  ): Promise<ReportData> {
    return await this.service.createReportData({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReportData] })
  @ApiNestedQuery(ReportDataFindManyArgs)
  async reportDataItems(@common.Req() request: Request): Promise<ReportData[]> {
    const args = plainToClass(ReportDataFindManyArgs, request.query);
    return this.service.reportDataItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReportData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reportData(
    @common.Param() params: ReportDataWhereUniqueInput
  ): Promise<ReportData | null> {
    const result = await this.service.reportData({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReportData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReportData(
    @common.Param() params: ReportDataWhereUniqueInput,
    @common.Body() data: ReportDataUpdateInput
  ): Promise<ReportData | null> {
    try {
      return await this.service.updateReportData({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReportData })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReportData(
    @common.Param() params: ReportDataWhereUniqueInput
  ): Promise<ReportData | null> {
    try {
      return await this.service.deleteReportData({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
