/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ReportTemplateService } from "../reportTemplate.service";
import { ReportTemplateCreateInput } from "./ReportTemplateCreateInput";
import { ReportTemplate } from "./ReportTemplate";
import { ReportTemplateFindManyArgs } from "./ReportTemplateFindManyArgs";
import { ReportTemplateWhereUniqueInput } from "./ReportTemplateWhereUniqueInput";
import { ReportTemplateUpdateInput } from "./ReportTemplateUpdateInput";

export class ReportTemplateControllerBase {
  constructor(protected readonly service: ReportTemplateService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ReportTemplate })
  async createReportTemplate(
    @common.Body() data: ReportTemplateCreateInput
  ): Promise<ReportTemplate> {
    return await this.service.createReportTemplate({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ReportTemplate] })
  @ApiNestedQuery(ReportTemplateFindManyArgs)
  async reportTemplates(
    @common.Req() request: Request
  ): Promise<ReportTemplate[]> {
    const args = plainToClass(ReportTemplateFindManyArgs, request.query);
    return this.service.reportTemplates({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ReportTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async reportTemplate(
    @common.Param() params: ReportTemplateWhereUniqueInput
  ): Promise<ReportTemplate | null> {
    const result = await this.service.reportTemplate({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ReportTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateReportTemplate(
    @common.Param() params: ReportTemplateWhereUniqueInput,
    @common.Body() data: ReportTemplateUpdateInput
  ): Promise<ReportTemplate | null> {
    try {
      return await this.service.updateReportTemplate({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ReportTemplate })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteReportTemplate(
    @common.Param() params: ReportTemplateWhereUniqueInput
  ): Promise<ReportTemplate | null> {
    try {
      return await this.service.deleteReportTemplate({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
