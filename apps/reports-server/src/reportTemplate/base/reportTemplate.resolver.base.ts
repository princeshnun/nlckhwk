/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ReportTemplate } from "./ReportTemplate";
import { ReportTemplateCountArgs } from "./ReportTemplateCountArgs";
import { ReportTemplateFindManyArgs } from "./ReportTemplateFindManyArgs";
import { ReportTemplateFindUniqueArgs } from "./ReportTemplateFindUniqueArgs";
import { DeleteReportTemplateArgs } from "./DeleteReportTemplateArgs";
import { ReportTemplateService } from "../reportTemplate.service";
@graphql.Resolver(() => ReportTemplate)
export class ReportTemplateResolverBase {
  constructor(protected readonly service: ReportTemplateService) {}

  async _reportTemplatesMeta(
    @graphql.Args() args: ReportTemplateCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ReportTemplate])
  async reportTemplates(
    @graphql.Args() args: ReportTemplateFindManyArgs
  ): Promise<ReportTemplate[]> {
    return this.service.reportTemplates(args);
  }

  @graphql.Query(() => ReportTemplate, { nullable: true })
  async reportTemplate(
    @graphql.Args() args: ReportTemplateFindUniqueArgs
  ): Promise<ReportTemplate | null> {
    const result = await this.service.reportTemplate(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ReportTemplate)
  async deleteReportTemplate(
    @graphql.Args() args: DeleteReportTemplateArgs
  ): Promise<ReportTemplate | null> {
    try {
      return await this.service.deleteReportTemplate(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
