/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Inventory } from "./Inventory";
import { InventoryCountArgs } from "./InventoryCountArgs";
import { InventoryFindManyArgs } from "./InventoryFindManyArgs";
import { InventoryFindUniqueArgs } from "./InventoryFindUniqueArgs";
import { CreateInventoryArgs } from "./CreateInventoryArgs";
import { UpdateInventoryArgs } from "./UpdateInventoryArgs";
import { DeleteInventoryArgs } from "./DeleteInventoryArgs";
import { Item } from "../../item/base/Item";
import { Location } from "../../location/base/Location";
import { InventoryService } from "../inventory.service";
@graphql.Resolver(() => Inventory)
export class InventoryResolverBase {
  constructor(protected readonly service: InventoryService) {}

  async _inventoriesMeta(
    @graphql.Args() args: InventoryCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Inventory])
  async inventories(
    @graphql.Args() args: InventoryFindManyArgs
  ): Promise<Inventory[]> {
    return this.service.inventories(args);
  }

  @graphql.Query(() => Inventory, { nullable: true })
  async inventory(
    @graphql.Args() args: InventoryFindUniqueArgs
  ): Promise<Inventory | null> {
    const result = await this.service.inventory(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Inventory)
  async createInventory(
    @graphql.Args() args: CreateInventoryArgs
  ): Promise<Inventory> {
    return await this.service.createInventory({
      ...args,
      data: {
        ...args.data,

        item: args.data.item
          ? {
              connect: args.data.item,
            }
          : undefined,

        location: args.data.location
          ? {
              connect: args.data.location,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Inventory)
  async updateInventory(
    @graphql.Args() args: UpdateInventoryArgs
  ): Promise<Inventory | null> {
    try {
      return await this.service.updateInventory({
        ...args,
        data: {
          ...args.data,

          item: args.data.item
            ? {
                connect: args.data.item,
              }
            : undefined,

          location: args.data.location
            ? {
                connect: args.data.location,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Inventory)
  async deleteInventory(
    @graphql.Args() args: DeleteInventoryArgs
  ): Promise<Inventory | null> {
    try {
      return await this.service.deleteInventory(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Item, {
    nullable: true,
    name: "item",
  })
  async getItem(@graphql.Parent() parent: Inventory): Promise<Item | null> {
    const result = await this.service.getItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Location, {
    nullable: true,
    name: "location",
  })
  async getLocation(
    @graphql.Parent() parent: Inventory
  ): Promise<Location | null> {
    const result = await this.service.getLocation(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
