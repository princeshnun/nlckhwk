/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Floor } from "./Floor";
import { FloorCountArgs } from "./FloorCountArgs";
import { FloorFindManyArgs } from "./FloorFindManyArgs";
import { FloorFindUniqueArgs } from "./FloorFindUniqueArgs";
import { CreateFloorArgs } from "./CreateFloorArgs";
import { UpdateFloorArgs } from "./UpdateFloorArgs";
import { DeleteFloorArgs } from "./DeleteFloorArgs";
import { FloorService } from "../floor.service";
@graphql.Resolver(() => Floor)
export class FloorResolverBase {
  constructor(protected readonly service: FloorService) {}

  async _floorsMeta(
    @graphql.Args() args: FloorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Floor])
  async floors(@graphql.Args() args: FloorFindManyArgs): Promise<Floor[]> {
    return this.service.floors(args);
  }

  @graphql.Query(() => Floor, { nullable: true })
  async floor(
    @graphql.Args() args: FloorFindUniqueArgs
  ): Promise<Floor | null> {
    const result = await this.service.floor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Floor)
  async createFloor(@graphql.Args() args: CreateFloorArgs): Promise<Floor> {
    return await this.service.createFloor({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Floor)
  async updateFloor(
    @graphql.Args() args: UpdateFloorArgs
  ): Promise<Floor | null> {
    try {
      return await this.service.updateFloor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Floor)
  async deleteFloor(
    @graphql.Args() args: DeleteFloorArgs
  ): Promise<Floor | null> {
    try {
      return await this.service.deleteFloor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
